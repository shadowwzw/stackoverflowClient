{
  "items": [
    {
      "tags": [
        "c++",
        "pointers",
        "reference",
        "c++-faq"
      ],
      "owner": {
        "reputation": 28601,
        "user_id": 123,
        "user_type": "registered",
        "accept_rate": 77,
        "profile_image": "https://i.stack.imgur.com/Tn2xB.jpg?s=128&g=1",
        "display_name": "prakash",
        "link": "https://stackoverflow.com/users/123/prakash"
      },
      "is_answered": true,
      "view_count": 776836,
      "protected_date": 1364445977,
      "answer_count": 32,
      "score": 2544,
      "last_activity_date": 1524818603,
      "creation_date": 1221163437,
      "last_edit_date": 1490199730,
      "question_id": 57483,
      "link": "https://stackoverflow.com/questions/57483/what-are-the-differences-between-a-pointer-variable-and-a-reference-variable-in",
      "title": "What are the differences between a pointer variable and a reference variable in C++?",
      "body": "<p>I know references are syntactic sugar, so code is easier to read and write.</p>\n\n<p>But what are the differences?</p>\n\n<hr>\n\n<p>Summary from answers and links below:</p>\n\n<ol>\n<li>A pointer can be re-assigned any number of times while a reference cannot be re-seated after binding.</li>\n<li>Pointers can point nowhere (<code>NULL</code>), whereas reference always refer to an object.</li>\n<li>You can't take the address of a reference like you can with pointers.</li>\n<li>There's no \"reference arithmetics\" (but you can take the address of an object pointed by a reference and do pointer arithmetics on it as in <code>&amp;obj + 5</code>).</li>\n</ol>\n\n<p>To clarify a misconception:</p>\n\n<blockquote>\n  <p><em>The C++ standard is very careful to avoid dictating how a compiler must\n  implement references, but every C++ compiler implements\n  references as pointers. That is, a declaration such as:</em></p>\n\n<pre><code>int &amp;ri = i;\n</code></pre>\n  \n  <p><strong><em>if it's not optimized away entirely</em></strong>, <em>allocates the same amount of storage\n  as a pointer, and places the address\n  of <code>i</code> into that storage.</em></p>\n</blockquote>\n\n<p><strong><em>So, a pointer and a reference both occupy the same amount of memory.</em></strong></p>\n\n<p>As a general rule,</p>\n\n<ul>\n<li>Use references in function parameters and return types to define useful and self-documenting interfaces.</li>\n<li>Use pointers to implement algorithms and data structures.</li>\n</ul>\n\n<p>Interesting read:</p>\n\n<ul>\n<li>My all-time favorite <a href=\"http://yosefk.com/c++fqa/ref.html\" rel=\"noreferrer\">C++ FAQ lite</a>.</li>\n<li><a href=\"http://www.embedded.com/electronics-blogs/programming-pointers/4023307/References-vs-Pointers\" rel=\"noreferrer\">References vs. Pointers</a>.</li>\n<li><a href=\"http://www.embedded.com/electronics-blogs/programming-pointers/4024641/An-Introduction-to-References\" rel=\"noreferrer\">An Introduction to References</a>.</li>\n<li><a href=\"http://www.embedded.com/electronics-blogs/programming-pointers/4023290/References-and-const\" rel=\"noreferrer\">References and const</a>.</li>\n</ul>\n"
    }
  ],
  "has_more": false,
  "quota_max": 10000,
  "quota_remaining": 9949
}
